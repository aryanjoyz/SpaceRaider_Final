package com.game.src.main;

import java.awt.Canvas;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.LinkedList;

import javax.swing.JFrame;

import com.game.src.main.classes.Entity1;
import com.game.src.main.classes.Entity2;

public class Game extends Canvas implements Runnable {
	
	private static final long serialVersionUID = 1L;
	public static final int WIDTH = 320;
	public static final int HEIGHT = WIDTH / 12 * 9;
	public static final int SCALE = 2;
	public final String TITLE = "SPACFE RAIDER";
	
	private boolean running = false;
	private Thread thread;
	
	private int enemyCount = 5;
	private int enemyKilled = 0;
	
	private BufferedImage image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
	private BufferedImage spriteSheet = null;
	private BufferedImage background = null;
	
	private boolean is_shooting = false;
	
	private Player p;
	private Controller c;
	private Textures t;
	
	public LinkedList<Entity1> e1;
	public LinkedList<Entity2> e2;
	
	private enum STATE{
		MENU,
		GAME
	};
	
	private STATE State = STATE.MENU;
	
	public void init(){
		BufferedImageLoader loader = new BufferedImageLoader();
		try{
			spriteSheet = loader.loadImage("/sprite_sheet.png");
			background = loader.loadImage("/background.jpg");
		} catch (IOException e){
			e.printStackTrace();
		}
		
		
		t = new Textures(this);
		
		p = new Player(200,200,t);
		c = new Controller(t, this);
		c.createEnemy(enemyCount);
		e1 = c.getEntity1();
		e2 = c.getEntity2();
		
		addKeyListener(new KeyInput(this));
	}
	
	private synchronized void start(){
		if(running)
			return;
		
		running = true;
		thread = new Thread (this);
		thread.start();
	}
	
	private synchronized void stop(){
		if(!running)
			return;
		
		running = false;
		try{
			thread.join();
		}catch (InterruptedException e){
			e.printStackTrace();
		}
		System.exit(1);
	}

	public void run() {
		requestFocus();
		init();
		long lastTime = System.nanoTime();
		final double amountOfTicks = 60.0;
		double ns = 100000000 / amountOfTicks;
		double delta = 0;
		int updates = 0;
		int frames = 0;
		long timer = System.currentTimeMillis();
		
		while(running){
			long now = System.nanoTime();
			delta += (now - lastTime) / ns;
			if (delta >= 1) {
				tick();
				delta--;
				updates++;
			}
			render();
			frames++;
			
			if (System.currentTimeMillis() - timer > 1000) {
				timer += 1000;
				System.out.println(updates + " Tick, Fps " + frames);
				updates = 0;
				frames = 0;
			}
		}
		stop();
	}
	
	private void tick() {
		p.tick();
		c.tick();
		
		if(enemyKilled >= enemyCount){
			enemyCount += 2;
			enemyKilled = 0;
			c.createEnemy(enemyCount);
		}
	}
	
	private void render() {
		BufferStrategy bs = this.getBufferStrategy();
		
		if(bs == null) {
			createBufferStrategy(3);
			return;
		}
		
		Graphics g = bs.getDrawGraphics();
		
		g.drawImage(image, 0, 0, getWidth(), getHeight(), this);
		g.drawImage(background, 0, 0, null);
		p.render(g);
		c.render(g);
		
		g.dispose();
		bs.show();
	}
	
	public void keyPressed(KeyEvent e){
		int key = e.getKeyCode();
		
		if(key == KeyEvent.VK_RIGHT){
			p.setVelX(1);
		} else if (key == KeyEvent.VK_LEFT){
			p.setVelX(-1);
		} else if (key == KeyEvent.VK_UP){
			p.setVelY(-1);
		}else if (key == KeyEvent.VK_DOWN){
			p.setVelY(1);
		}
		else if (key == KeyEvent.VK_SPACE && !is_shooting){
			is_shooting = true;
			c.addEntity(new Bullet(p.getX(), p.getY(), t, this));
		}
	}
	
	public void keyReleased(KeyEvent e){
		int key = e.getKeyCode();
		
		if(key == KeyEvent.VK_RIGHT){
			p.setVelX(0);
		} else if (key == KeyEvent.VK_LEFT){
			p.setVelX(0);
		} else if (key == KeyEvent.VK_UP){
			p.setVelY(0);
		}else if (key == KeyEvent.VK_DOWN){
			p.setVelY(0);
		}
		else if (key == KeyEvent.VK_SPACE){
			is_shooting = false;
		}
	}	
	public static void main(String args[]){
		Game game = new Game();
		
		game.setPreferredSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
		game.setMaximumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
		game.setMinimumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));

		JFrame frame = new JFrame(game.TITLE);
		frame.add(game);
		frame.pack();
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setLocationRelativeTo(null);
		frame.setResizable(false);
		frame.setVisible(true);
		
		game.start();
	}
	public BufferedImage getSpriteSheet(){
		return spriteSheet;
	}

	public int getEnemyCount() {
		return enemyCount;
	}

	public void setEnemyCount(int enemyCount) {
		this.enemyCount = enemyCount;
	}

	public int getEnemyKilled() {
		return enemyKilled;
	}

	public void setEnemyKilled(int enemyKilled) {
		this.enemyKilled = enemyKilled;
	}
	
}